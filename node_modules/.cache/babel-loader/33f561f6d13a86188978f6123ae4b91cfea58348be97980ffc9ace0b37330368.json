{"ast":null,"code":"import _classCallCheck from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport Delta from 'quill-delta';\nimport Module from '../core/module.js';\nimport Quill from '../core/quill.js';\nimport { deleteRange as _deleteRange } from './keyboard.js';\nvar INSERT_TYPES = ['insertText', 'insertReplacementText'];\nvar Input = /*#__PURE__*/function (_Module) {\n  function Input(quill, options) {\n    var _this;\n    _classCallCheck(this, Input);\n    _this = _callSuper(this, Input, [quill, options]);\n    quill.root.addEventListener('beforeinput', function (event) {\n      _this.handleBeforeInput(event);\n    });\n\n    // Gboard with English input on Android triggers `compositionstart` sometimes even\n    // users are not going to type anything.\n    if (!/Android/i.test(navigator.userAgent)) {\n      quill.on(Quill.events.COMPOSITION_BEFORE_START, function () {\n        _this.handleCompositionStart();\n      });\n    }\n    return _this;\n  }\n  _inherits(Input, _Module);\n  return _createClass(Input, [{\n    key: \"deleteRange\",\n    value: function deleteRange(range) {\n      _deleteRange({\n        range: range,\n        quill: this.quill\n      });\n    }\n  }, {\n    key: \"replaceText\",\n    value: function replaceText(range) {\n      var text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (range.length === 0) return false;\n      if (text) {\n        // Follow the native behavior that inherits the formats of the first character\n        var formats = this.quill.getFormat(range.index, 1);\n        this.deleteRange(range);\n        this.quill.updateContents(new Delta().retain(range.index).insert(text, formats), Quill.sources.USER);\n      } else {\n        this.deleteRange(range);\n      }\n      this.quill.setSelection(range.index + text.length, 0, Quill.sources.SILENT);\n      return true;\n    }\n  }, {\n    key: \"handleBeforeInput\",\n    value: function handleBeforeInput(event) {\n      if (this.quill.composition.isComposing || event.defaultPrevented || !INSERT_TYPES.includes(event.inputType)) {\n        return;\n      }\n      var staticRange = event.getTargetRanges ? event.getTargetRanges()[0] : null;\n      if (!staticRange || staticRange.collapsed === true) {\n        return;\n      }\n      var text = getPlainTextFromInputEvent(event);\n      if (text == null) {\n        return;\n      }\n      var normalized = this.quill.selection.normalizeNative(staticRange);\n      var range = normalized ? this.quill.selection.normalizedToRange(normalized) : null;\n      if (range && this.replaceText(range, text)) {\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"handleCompositionStart\",\n    value: function handleCompositionStart() {\n      var range = this.quill.getSelection();\n      if (range) {\n        this.replaceText(range);\n      }\n    }\n  }]);\n}(Module);\nfunction getPlainTextFromInputEvent(event) {\n  var _event$dataTransfer;\n  // When `inputType` is \"insertText\":\n  // - `event.data` should be string (Safari uses `event.dataTransfer`).\n  // - `event.dataTransfer` should be null.\n  // When `inputType` is \"insertReplacementText\":\n  // - `event.data` should be null.\n  // - `event.dataTransfer` should contain \"text/plain\" data.\n\n  if (typeof event.data === 'string') {\n    return event.data;\n  }\n  if ((_event$dataTransfer = event.dataTransfer) !== null && _event$dataTransfer !== void 0 && _event$dataTransfer.types.includes('text/plain')) {\n    return event.dataTransfer.getData('text/plain');\n  }\n  return null;\n}\nexport default Input;","map":{"version":3,"names":["Delta","Module","Quill","deleteRange","INSERT_TYPES","Input","_Module","quill","options","_this","_classCallCheck","_callSuper","root","addEventListener","event","handleBeforeInput","test","navigator","userAgent","on","events","COMPOSITION_BEFORE_START","handleCompositionStart","_inherits","_createClass","key","value","range","replaceText","text","arguments","length","undefined","formats","getFormat","index","updateContents","retain","insert","sources","USER","setSelection","SILENT","composition","isComposing","defaultPrevented","includes","inputType","staticRange","getTargetRanges","collapsed","getPlainTextFromInputEvent","normalized","selection","normalizeNative","normalizedToRange","preventDefault","getSelection","_event$dataTransfer","data","dataTransfer","types","getData"],"sources":["../../src/modules/input.ts"],"sourcesContent":["import Delta from 'quill-delta';\nimport Module from '../core/module.js';\nimport Quill from '../core/quill.js';\nimport type { Range } from '../core/selection.js';\nimport { deleteRange } from './keyboard.js';\n\nconst INSERT_TYPES = ['insertText', 'insertReplacementText'];\n\nclass Input extends Module {\n  constructor(quill: Quill, options: Record<string, never>) {\n    super(quill, options);\n\n    quill.root.addEventListener('beforeinput', (event) => {\n      this.handleBeforeInput(event);\n    });\n\n    // Gboard with English input on Android triggers `compositionstart` sometimes even\n    // users are not going to type anything.\n    if (!/Android/i.test(navigator.userAgent)) {\n      quill.on(Quill.events.COMPOSITION_BEFORE_START, () => {\n        this.handleCompositionStart();\n      });\n    }\n  }\n\n  private deleteRange(range: Range) {\n    deleteRange({ range, quill: this.quill });\n  }\n\n  private replaceText(range: Range, text = '') {\n    if (range.length === 0) return false;\n\n    if (text) {\n      // Follow the native behavior that inherits the formats of the first character\n      const formats = this.quill.getFormat(range.index, 1);\n      this.deleteRange(range);\n      this.quill.updateContents(\n        new Delta().retain(range.index).insert(text, formats),\n        Quill.sources.USER,\n      );\n    } else {\n      this.deleteRange(range);\n    }\n\n    this.quill.setSelection(range.index + text.length, 0, Quill.sources.SILENT);\n    return true;\n  }\n\n  private handleBeforeInput(event: InputEvent) {\n    if (\n      this.quill.composition.isComposing ||\n      event.defaultPrevented ||\n      !INSERT_TYPES.includes(event.inputType)\n    ) {\n      return;\n    }\n\n    const staticRange = event.getTargetRanges\n      ? event.getTargetRanges()[0]\n      : null;\n    if (!staticRange || staticRange.collapsed === true) {\n      return;\n    }\n\n    const text = getPlainTextFromInputEvent(event);\n    if (text == null) {\n      return;\n    }\n    const normalized = this.quill.selection.normalizeNative(staticRange);\n    const range = normalized\n      ? this.quill.selection.normalizedToRange(normalized)\n      : null;\n    if (range && this.replaceText(range, text)) {\n      event.preventDefault();\n    }\n  }\n\n  private handleCompositionStart() {\n    const range = this.quill.getSelection();\n    if (range) {\n      this.replaceText(range);\n    }\n  }\n}\n\nfunction getPlainTextFromInputEvent(event: InputEvent) {\n  // When `inputType` is \"insertText\":\n  // - `event.data` should be string (Safari uses `event.dataTransfer`).\n  // - `event.dataTransfer` should be null.\n  // When `inputType` is \"insertReplacementText\":\n  // - `event.data` should be null.\n  // - `event.dataTransfer` should contain \"text/plain\" data.\n\n  if (typeof event.data === 'string') {\n    return event.data;\n  }\n  if (event.dataTransfer?.types.includes('text/plain')) {\n    return event.dataTransfer.getData('text/plain');\n  }\n  return null;\n}\n\nexport default Input;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
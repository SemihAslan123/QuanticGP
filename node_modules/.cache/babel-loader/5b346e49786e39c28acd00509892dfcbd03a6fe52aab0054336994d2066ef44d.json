{"ast":null,"code":"import _slicedToArray from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _defineProperty from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.at-alternative.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport Block from '../blots/block.js';\nimport Container from '../blots/container.js';\nvar TableCell = /*#__PURE__*/function (_Block) {\n  function TableCell() {\n    _classCallCheck(this, TableCell);\n    return _callSuper(this, TableCell, arguments);\n  }\n  _inherits(TableCell, _Block);\n  return _createClass(TableCell, [{\n    key: \"cellOffset\",\n    value: function cellOffset() {\n      if (this.parent) {\n        return this.parent.children.indexOf(this);\n      }\n      return -1;\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      if (name === TableCell.blotName && value) {\n        this.domNode.setAttribute('data-row', value);\n      } else {\n        _superPropGet(TableCell, \"format\", this, 3)([name, value]);\n      }\n    }\n  }, {\n    key: \"row\",\n    value: function row() {\n      return this.parent;\n    }\n  }, {\n    key: \"rowOffset\",\n    value: function rowOffset() {\n      if (this.row()) {\n        return this.row().rowOffset();\n      }\n      return -1;\n    }\n  }, {\n    key: \"table\",\n    value: function table() {\n      return this.row() && this.row().table();\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _superPropGet(TableCell, \"create\", this, 2)([]);\n      if (value) {\n        node.setAttribute('data-row', value);\n      } else {\n        node.setAttribute('data-row', tableId());\n      }\n      return node;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      if (domNode.hasAttribute('data-row')) {\n        return domNode.getAttribute('data-row');\n      }\n      return undefined;\n    }\n  }]);\n}(Block);\n_defineProperty(TableCell, \"blotName\", 'table');\n_defineProperty(TableCell, \"tagName\", 'TD');\nvar TableRow = /*#__PURE__*/function (_Container) {\n  function TableRow() {\n    _classCallCheck(this, TableRow);\n    return _callSuper(this, TableRow, arguments);\n  }\n  _inherits(TableRow, _Container);\n  return _createClass(TableRow, [{\n    key: \"checkMerge\",\n    value: function checkMerge() {\n      // @ts-expect-error\n      if (_superPropGet(TableRow, \"checkMerge\", this, 3)([]) && this.next.children.head != null) {\n        // @ts-expect-error\n        var thisHead = this.children.head.formats();\n        // @ts-expect-error\n        var thisTail = this.children.tail.formats();\n        // @ts-expect-error\n        var nextHead = this.next.children.head.formats();\n        // @ts-expect-error\n        var nextTail = this.next.children.tail.formats();\n        return thisHead.table === thisTail.table && thisHead.table === nextHead.table && thisHead.table === nextTail.table;\n      }\n      return false;\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize(context) {\n      var _this = this;\n      _superPropGet(TableRow, \"optimize\", this, 3)([context]);\n      this.children.forEach(function (child) {\n        if (child.next == null) return;\n        var childFormats = child.formats();\n        var nextFormats = child.next.formats();\n        if (childFormats.table !== nextFormats.table) {\n          var next = _this.splitAfter(child);\n          if (next) {\n            // @ts-expect-error TODO: parameters of optimize() should be a optional\n            next.optimize();\n          }\n          // We might be able to merge with prev now\n          if (_this.prev) {\n            // @ts-expect-error TODO: parameters of optimize() should be a optional\n            _this.prev.optimize();\n          }\n        }\n      });\n    }\n  }, {\n    key: \"rowOffset\",\n    value: function rowOffset() {\n      if (this.parent) {\n        return this.parent.children.indexOf(this);\n      }\n      return -1;\n    }\n  }, {\n    key: \"table\",\n    value: function table() {\n      return this.parent && this.parent.parent;\n    }\n  }]);\n}(Container);\n_defineProperty(TableRow, \"blotName\", 'table-row');\n_defineProperty(TableRow, \"tagName\", 'TR');\nvar TableBody = /*#__PURE__*/function (_Container2) {\n  function TableBody() {\n    _classCallCheck(this, TableBody);\n    return _callSuper(this, TableBody, arguments);\n  }\n  _inherits(TableBody, _Container2);\n  return _createClass(TableBody);\n}(Container);\n_defineProperty(TableBody, \"blotName\", 'table-body');\n_defineProperty(TableBody, \"tagName\", 'TBODY');\nvar TableContainer = /*#__PURE__*/function (_Container3) {\n  function TableContainer() {\n    _classCallCheck(this, TableContainer);\n    return _callSuper(this, TableContainer, arguments);\n  }\n  _inherits(TableContainer, _Container3);\n  return _createClass(TableContainer, [{\n    key: \"balanceCells\",\n    value: function balanceCells() {\n      var _this2 = this;\n      var rows = this.descendants(TableRow);\n      var maxColumns = rows.reduce(function (max, row) {\n        return Math.max(row.children.length, max);\n      }, 0);\n      rows.forEach(function (row) {\n        new Array(maxColumns - row.children.length).fill(0).forEach(function () {\n          var value;\n          if (row.children.head != null) {\n            value = TableCell.formats(row.children.head.domNode);\n          }\n          var blot = _this2.scroll.create(TableCell.blotName, value);\n          row.appendChild(blot);\n          // @ts-expect-error TODO: parameters of optimize() should be a optional\n          blot.optimize(); // Add break blot\n        });\n      });\n    }\n  }, {\n    key: \"cells\",\n    value: function cells(column) {\n      return this.rows().map(function (row) {\n        return row.children.at(column);\n      });\n    }\n  }, {\n    key: \"deleteColumn\",\n    value: function deleteColumn(index) {\n      // @ts-expect-error\n      var _this$descendant = this.descendant(TableBody),\n        _this$descendant2 = _slicedToArray(_this$descendant, 1),\n        body = _this$descendant2[0];\n      if (body == null || body.children.head == null) return;\n      body.children.forEach(function (row) {\n        var cell = row.children.at(index);\n        if (cell != null) {\n          cell.remove();\n        }\n      });\n    }\n  }, {\n    key: \"insertColumn\",\n    value: function insertColumn(index) {\n      var _this3 = this;\n      // @ts-expect-error\n      var _this$descendant3 = this.descendant(TableBody),\n        _this$descendant4 = _slicedToArray(_this$descendant3, 1),\n        body = _this$descendant4[0];\n      if (body == null || body.children.head == null) return;\n      body.children.forEach(function (row) {\n        var ref = row.children.at(index);\n        // @ts-expect-error\n        var value = TableCell.formats(row.children.head.domNode);\n        var cell = _this3.scroll.create(TableCell.blotName, value);\n        row.insertBefore(cell, ref);\n      });\n    }\n  }, {\n    key: \"insertRow\",\n    value: function insertRow(index) {\n      var _this4 = this;\n      // @ts-expect-error\n      var _this$descendant5 = this.descendant(TableBody),\n        _this$descendant6 = _slicedToArray(_this$descendant5, 1),\n        body = _this$descendant6[0];\n      if (body == null || body.children.head == null) return;\n      var id = tableId();\n      var row = this.scroll.create(TableRow.blotName);\n      body.children.head.children.forEach(function () {\n        var cell = _this4.scroll.create(TableCell.blotName, id);\n        row.appendChild(cell);\n      });\n      var ref = body.children.at(index);\n      body.insertBefore(row, ref);\n    }\n  }, {\n    key: \"rows\",\n    value: function rows() {\n      var body = this.children.head;\n      if (body == null) return [];\n      return body.children.map(function (row) {\n        return row;\n      });\n    }\n  }]);\n}(Container);\n_defineProperty(TableContainer, \"blotName\", 'table-container');\n_defineProperty(TableContainer, \"tagName\", 'TABLE');\nTableContainer.allowedChildren = [TableBody];\nTableBody.requiredContainer = TableContainer;\nTableBody.allowedChildren = [TableRow];\nTableRow.requiredContainer = TableBody;\nTableRow.allowedChildren = [TableCell];\nTableCell.requiredContainer = TableRow;\nfunction tableId() {\n  var id = Math.random().toString(36).slice(2, 6);\n  return \"row-\".concat(id);\n}\nexport { TableCell, TableRow, TableBody, TableContainer, tableId };","map":{"version":3,"names":["Block","Container","TableCell","_Block","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","cellOffset","parent","children","indexOf","format","name","blotName","domNode","setAttribute","_superPropGet","row","rowOffset","table","create","node","tableId","formats","hasAttribute","getAttribute","undefined","_defineProperty","TableRow","_Container","checkMerge","next","head","thisHead","thisTail","tail","nextHead","nextTail","optimize","context","_this","forEach","child","childFormats","nextFormats","splitAfter","prev","TableBody","_Container2","TableContainer","_Container3","balanceCells","_this2","rows","descendants","maxColumns","reduce","max","Math","length","Array","fill","blot","scroll","appendChild","cells","column","map","at","deleteColumn","index","_this$descendant","descendant","_this$descendant2","_slicedToArray","body","cell","remove","insertColumn","_this3","_this$descendant3","_this$descendant4","ref","insertBefore","insertRow","_this4","_this$descendant5","_this$descendant6","id","allowedChildren","requiredContainer","random","toString","slice","concat"],"sources":["../../src/formats/table.ts"],"sourcesContent":["import type { LinkedList } from 'parchment';\nimport Block from '../blots/block.js';\nimport Container from '../blots/container.js';\n\nclass TableCell extends Block {\n  static blotName = 'table';\n  static tagName = 'TD';\n\n  static create(value: string) {\n    const node = super.create() as HTMLElement;\n    if (value) {\n      node.setAttribute('data-row', value);\n    } else {\n      node.setAttribute('data-row', tableId());\n    }\n    return node;\n  }\n\n  static formats(domNode: HTMLElement) {\n    if (domNode.hasAttribute('data-row')) {\n      return domNode.getAttribute('data-row');\n    }\n    return undefined;\n  }\n\n  next: this | null;\n\n  cellOffset() {\n    if (this.parent) {\n      return this.parent.children.indexOf(this);\n    }\n    return -1;\n  }\n\n  format(name: string, value: string) {\n    if (name === TableCell.blotName && value) {\n      this.domNode.setAttribute('data-row', value);\n    } else {\n      super.format(name, value);\n    }\n  }\n\n  row(): TableRow {\n    return this.parent as TableRow;\n  }\n\n  rowOffset() {\n    if (this.row()) {\n      return this.row().rowOffset();\n    }\n    return -1;\n  }\n\n  table() {\n    return this.row() && this.row().table();\n  }\n}\n\nclass TableRow extends Container {\n  static blotName = 'table-row';\n  static tagName = 'TR';\n\n  children: LinkedList<TableCell>;\n  next: this | null;\n\n  checkMerge() {\n    // @ts-expect-error\n    if (super.checkMerge() && this.next.children.head != null) {\n      // @ts-expect-error\n      const thisHead = this.children.head.formats();\n      // @ts-expect-error\n      const thisTail = this.children.tail.formats();\n      // @ts-expect-error\n      const nextHead = this.next.children.head.formats();\n      // @ts-expect-error\n      const nextTail = this.next.children.tail.formats();\n      return (\n        thisHead.table === thisTail.table &&\n        thisHead.table === nextHead.table &&\n        thisHead.table === nextTail.table\n      );\n    }\n    return false;\n  }\n\n  optimize(context: { [key: string]: any }) {\n    super.optimize(context);\n    this.children.forEach((child) => {\n      if (child.next == null) return;\n      const childFormats = child.formats();\n      const nextFormats = child.next.formats();\n      if (childFormats.table !== nextFormats.table) {\n        const next = this.splitAfter(child);\n        if (next) {\n          // @ts-expect-error TODO: parameters of optimize() should be a optional\n          next.optimize();\n        }\n        // We might be able to merge with prev now\n        if (this.prev) {\n          // @ts-expect-error TODO: parameters of optimize() should be a optional\n          this.prev.optimize();\n        }\n      }\n    });\n  }\n\n  rowOffset() {\n    if (this.parent) {\n      return this.parent.children.indexOf(this);\n    }\n    return -1;\n  }\n\n  table() {\n    return this.parent && this.parent.parent;\n  }\n}\n\nclass TableBody extends Container {\n  static blotName = 'table-body';\n  static tagName = 'TBODY';\n\n  children: LinkedList<TableRow>;\n}\n\nclass TableContainer extends Container {\n  static blotName = 'table-container';\n  static tagName = 'TABLE';\n\n  children: LinkedList<TableBody>;\n\n  balanceCells() {\n    const rows = this.descendants(TableRow);\n    const maxColumns = rows.reduce((max, row) => {\n      return Math.max(row.children.length, max);\n    }, 0);\n    rows.forEach((row) => {\n      new Array(maxColumns - row.children.length).fill(0).forEach(() => {\n        let value;\n        if (row.children.head != null) {\n          value = TableCell.formats(row.children.head.domNode);\n        }\n        const blot = this.scroll.create(TableCell.blotName, value);\n        row.appendChild(blot);\n        // @ts-expect-error TODO: parameters of optimize() should be a optional\n        blot.optimize(); // Add break blot\n      });\n    });\n  }\n\n  cells(column: number) {\n    return this.rows().map((row) => row.children.at(column));\n  }\n\n  deleteColumn(index: number) {\n    // @ts-expect-error\n    const [body] = this.descendant(TableBody) as TableBody[];\n    if (body == null || body.children.head == null) return;\n    body.children.forEach((row) => {\n      const cell = row.children.at(index);\n      if (cell != null) {\n        cell.remove();\n      }\n    });\n  }\n\n  insertColumn(index: number) {\n    // @ts-expect-error\n    const [body] = this.descendant(TableBody) as TableBody[];\n    if (body == null || body.children.head == null) return;\n    body.children.forEach((row) => {\n      const ref = row.children.at(index);\n      // @ts-expect-error\n      const value = TableCell.formats(row.children.head.domNode);\n      const cell = this.scroll.create(TableCell.blotName, value);\n      row.insertBefore(cell, ref);\n    });\n  }\n\n  insertRow(index: number) {\n    // @ts-expect-error\n    const [body] = this.descendant(TableBody) as TableBody[];\n    if (body == null || body.children.head == null) return;\n    const id = tableId();\n    const row = this.scroll.create(TableRow.blotName) as TableRow;\n    body.children.head.children.forEach(() => {\n      const cell = this.scroll.create(TableCell.blotName, id);\n      row.appendChild(cell);\n    });\n    const ref = body.children.at(index);\n    body.insertBefore(row, ref);\n  }\n\n  rows() {\n    const body = this.children.head;\n    if (body == null) return [];\n    return body.children.map((row) => row);\n  }\n}\n\nTableContainer.allowedChildren = [TableBody];\nTableBody.requiredContainer = TableContainer;\n\nTableBody.allowedChildren = [TableRow];\nTableRow.requiredContainer = TableBody;\n\nTableRow.allowedChildren = [TableCell];\nTableCell.requiredContainer = TableRow;\n\nfunction tableId() {\n  const id = Math.random().toString(36).slice(2, 6);\n  return `row-${id}`;\n}\n\nexport { TableCell, TableRow, TableBody, TableContainer, tableId };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
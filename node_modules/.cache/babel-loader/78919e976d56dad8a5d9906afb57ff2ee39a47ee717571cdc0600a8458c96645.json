{"ast":null,"code":"import _objectSpread from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _defineProperty from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { AttributorStore, BlockBlot, EmbedBlot, LeafBlot, Scope } from 'parchment';\nimport Delta from 'quill-delta';\nimport Break from './break.js';\nimport Inline from './inline.js';\nimport TextBlot from './text.js';\nvar NEWLINE_LENGTH = 1;\nvar Block = /*#__PURE__*/function (_BlockBlot) {\n  function Block() {\n    var _this;\n    _classCallCheck(this, Block);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _callSuper(this, Block, [].concat(args));\n    _defineProperty(_this, \"cache\", {});\n    return _this;\n  }\n  _inherits(Block, _BlockBlot);\n  return _createClass(Block, [{\n    key: \"delta\",\n    value: function delta() {\n      if (this.cache.delta == null) {\n        this.cache.delta = blockDelta(this);\n      }\n      return this.cache.delta;\n    }\n  }, {\n    key: \"deleteAt\",\n    value: function deleteAt(index, length) {\n      _superPropGet(Block, \"deleteAt\", this, 3)([index, length]);\n      this.cache = {};\n    }\n  }, {\n    key: \"formatAt\",\n    value: function formatAt(index, length, name, value) {\n      if (length <= 0) return;\n      if (this.scroll.query(name, Scope.BLOCK)) {\n        if (index + length === this.length()) {\n          this.format(name, value);\n        }\n      } else {\n        _superPropGet(Block, \"formatAt\", this, 3)([index, Math.min(length, this.length() - index - 1), name, value]);\n      }\n      this.cache = {};\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(index, value, def) {\n      if (def != null) {\n        _superPropGet(Block, \"insertAt\", this, 3)([index, value, def]);\n        this.cache = {};\n        return;\n      }\n      if (value.length === 0) return;\n      var lines = value.split('\\n');\n      var text = lines.shift();\n      if (text.length > 0) {\n        if (index < this.length() - 1 || this.children.tail == null) {\n          _superPropGet(Block, \"insertAt\", this, 3)([Math.min(index, this.length() - 1), text]);\n        } else {\n          this.children.tail.insertAt(this.children.tail.length(), text);\n        }\n        this.cache = {};\n      }\n      // TODO: Fix this next time the file is edited.\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var block = this;\n      lines.reduce(function (lineIndex, line) {\n        // @ts-expect-error Fix me later\n        block = block.split(lineIndex, true);\n        block.insertAt(0, line);\n        return line.length;\n      }, index + text.length);\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(blot, ref) {\n      var head = this.children.head;\n      _superPropGet(Block, \"insertBefore\", this, 3)([blot, ref]);\n      if (head instanceof Break) {\n        head.remove();\n      }\n      this.cache = {};\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      if (this.cache.length == null) {\n        this.cache.length = _superPropGet(Block, \"length\", this, 3)([]) + NEWLINE_LENGTH;\n      }\n      return this.cache.length;\n    }\n  }, {\n    key: \"moveChildren\",\n    value: function moveChildren(target, ref) {\n      _superPropGet(Block, \"moveChildren\", this, 3)([target, ref]);\n      this.cache = {};\n    }\n  }, {\n    key: \"optimize\",\n    value: function optimize(context) {\n      _superPropGet(Block, \"optimize\", this, 3)([context]);\n      this.cache = {};\n    }\n  }, {\n    key: \"path\",\n    value: function path(index) {\n      return _superPropGet(Block, \"path\", this, 3)([index, true]);\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      _superPropGet(Block, \"removeChild\", this, 3)([child]);\n      this.cache = {};\n    }\n  }, {\n    key: \"split\",\n    value: function split(index) {\n      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n        var clone = this.clone();\n        if (index === 0) {\n          this.parent.insertBefore(clone, this);\n          return this;\n        }\n        this.parent.insertBefore(clone, this.next);\n        return clone;\n      }\n      var next = _superPropGet(Block, \"split\", this, 3)([index, force]);\n      this.cache = {};\n      return next;\n    }\n  }]);\n}(BlockBlot);\nBlock.blotName = 'block';\nBlock.tagName = 'P';\nBlock.defaultChild = Break;\nBlock.allowedChildren = [Break, Inline, EmbedBlot, TextBlot];\nvar BlockEmbed = /*#__PURE__*/function (_EmbedBlot) {\n  function BlockEmbed() {\n    _classCallCheck(this, BlockEmbed);\n    return _callSuper(this, BlockEmbed, arguments);\n  }\n  _inherits(BlockEmbed, _EmbedBlot);\n  return _createClass(BlockEmbed, [{\n    key: \"attach\",\n    value: function attach() {\n      _superPropGet(BlockEmbed, \"attach\", this, 3)([]);\n      this.attributes = new AttributorStore(this.domNode);\n    }\n  }, {\n    key: \"delta\",\n    value: function delta() {\n      return new Delta().insert(this.value(), _objectSpread(_objectSpread({}, this.formats()), this.attributes.values()));\n    }\n  }, {\n    key: \"format\",\n    value: function format(name, value) {\n      var attribute = this.scroll.query(name, Scope.BLOCK_ATTRIBUTE);\n      if (attribute != null) {\n        // @ts-expect-error TODO: Scroll#query() should return Attributor when scope is attribute\n        this.attributes.attribute(attribute, value);\n      }\n    }\n  }, {\n    key: \"formatAt\",\n    value: function formatAt(index, length, name, value) {\n      this.format(name, value);\n    }\n  }, {\n    key: \"insertAt\",\n    value: function insertAt(index, value, def) {\n      var _this2 = this;\n      if (def != null) {\n        _superPropGet(BlockEmbed, \"insertAt\", this, 3)([index, value, def]);\n        return;\n      }\n      var lines = value.split('\\n');\n      var text = lines.pop();\n      var blocks = lines.map(function (line) {\n        var block = _this2.scroll.create(Block.blotName);\n        block.insertAt(0, line);\n        return block;\n      });\n      var ref = this.split(index);\n      blocks.forEach(function (block) {\n        _this2.parent.insertBefore(block, ref);\n      });\n      if (text) {\n        this.parent.insertBefore(this.scroll.create('text', text), ref);\n      }\n    }\n  }]);\n}(EmbedBlot);\nBlockEmbed.scope = Scope.BLOCK_BLOT;\n// It is important for cursor behavior BlockEmbeds use tags that are block level elements\n\nfunction blockDelta(blot) {\n  var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return blot.descendants(LeafBlot).reduce(function (delta, leaf) {\n    if (leaf.length() === 0) {\n      return delta;\n    }\n    return delta.insert(leaf.value(), bubbleFormats(leaf, {}, filter));\n  }, new Delta()).insert('\\n', bubbleFormats(blot));\n}\nfunction bubbleFormats(blot) {\n  var formats = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (blot == null) return formats;\n  if ('formats' in blot && typeof blot.formats === 'function') {\n    formats = _objectSpread(_objectSpread({}, formats), blot.formats());\n    if (filter) {\n      // exclude syntax highlighting from deltas and getFormat()\n      delete formats['code-token'];\n    }\n  }\n  if (blot.parent == null || blot.parent.statics.blotName === 'scroll' || blot.parent.statics.scope !== blot.statics.scope) {\n    return formats;\n  }\n  return bubbleFormats(blot.parent, formats, filter);\n}\nexport { blockDelta, bubbleFormats, BlockEmbed, Block as default };","map":{"version":3,"names":["AttributorStore","BlockBlot","EmbedBlot","LeafBlot","Scope","Delta","Break","Inline","TextBlot","NEWLINE_LENGTH","Block","_BlockBlot","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_defineProperty","_inherits","_createClass","key","value","delta","cache","blockDelta","deleteAt","index","_superPropGet","formatAt","name","scroll","query","BLOCK","format","Math","min","insertAt","def","lines","split","text","shift","children","tail","block","reduce","lineIndex","line","insertBefore","blot","ref","head","remove","moveChildren","target","optimize","context","path","removeChild","child","force","undefined","clone","parent","next","blotName","tagName","defaultChild","allowedChildren","BlockEmbed","_EmbedBlot","attach","attributes","domNode","insert","_objectSpread","formats","values","attribute","BLOCK_ATTRIBUTE","_this2","pop","blocks","map","create","forEach","scope","BLOCK_BLOT","filter","descendants","leaf","bubbleFormats","statics","default"],"sources":["../../src/blots/block.ts"],"sourcesContent":["import {\n  AttributorStore,\n  BlockBlot,\n  EmbedBlot,\n  LeafBlot,\n  Scope,\n} from 'parchment';\nimport type { Blot, Parent } from 'parchment';\nimport Delta from 'quill-delta';\nimport Break from './break.js';\nimport Inline from './inline.js';\nimport TextBlot from './text.js';\n\nconst NEWLINE_LENGTH = 1;\n\nclass Block extends BlockBlot {\n  cache: { delta?: Delta | null; length?: number } = {};\n\n  delta(): Delta {\n    if (this.cache.delta == null) {\n      this.cache.delta = blockDelta(this);\n    }\n    return this.cache.delta;\n  }\n\n  deleteAt(index: number, length: number) {\n    super.deleteAt(index, length);\n    this.cache = {};\n  }\n\n  formatAt(index: number, length: number, name: string, value: unknown) {\n    if (length <= 0) return;\n    if (this.scroll.query(name, Scope.BLOCK)) {\n      if (index + length === this.length()) {\n        this.format(name, value);\n      }\n    } else {\n      super.formatAt(\n        index,\n        Math.min(length, this.length() - index - 1),\n        name,\n        value,\n      );\n    }\n    this.cache = {};\n  }\n\n  insertAt(index: number, value: string, def?: unknown) {\n    if (def != null) {\n      super.insertAt(index, value, def);\n      this.cache = {};\n      return;\n    }\n    if (value.length === 0) return;\n    const lines = value.split('\\n');\n    const text = lines.shift() as string;\n    if (text.length > 0) {\n      if (index < this.length() - 1 || this.children.tail == null) {\n        super.insertAt(Math.min(index, this.length() - 1), text);\n      } else {\n        this.children.tail.insertAt(this.children.tail.length(), text);\n      }\n      this.cache = {};\n    }\n    // TODO: Fix this next time the file is edited.\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    let block: Blot | this = this;\n    lines.reduce((lineIndex, line) => {\n      // @ts-expect-error Fix me later\n      block = block.split(lineIndex, true);\n      block.insertAt(0, line);\n      return line.length;\n    }, index + text.length);\n  }\n\n  insertBefore(blot: Blot, ref?: Blot | null) {\n    const { head } = this.children;\n    super.insertBefore(blot, ref);\n    if (head instanceof Break) {\n      head.remove();\n    }\n    this.cache = {};\n  }\n\n  length() {\n    if (this.cache.length == null) {\n      this.cache.length = super.length() + NEWLINE_LENGTH;\n    }\n    return this.cache.length;\n  }\n\n  moveChildren(target: Parent, ref?: Blot | null) {\n    super.moveChildren(target, ref);\n    this.cache = {};\n  }\n\n  optimize(context: { [key: string]: any }) {\n    super.optimize(context);\n    this.cache = {};\n  }\n\n  path(index: number) {\n    return super.path(index, true);\n  }\n\n  removeChild(child: Blot) {\n    super.removeChild(child);\n    this.cache = {};\n  }\n\n  split(index: number, force: boolean | undefined = false): Blot | null {\n    if (force && (index === 0 || index >= this.length() - NEWLINE_LENGTH)) {\n      const clone = this.clone();\n      if (index === 0) {\n        this.parent.insertBefore(clone, this);\n        return this;\n      }\n      this.parent.insertBefore(clone, this.next);\n      return clone;\n    }\n    const next = super.split(index, force);\n    this.cache = {};\n    return next;\n  }\n}\nBlock.blotName = 'block';\nBlock.tagName = 'P';\nBlock.defaultChild = Break;\nBlock.allowedChildren = [Break, Inline, EmbedBlot, TextBlot];\n\nclass BlockEmbed extends EmbedBlot {\n  attributes: AttributorStore;\n  domNode: HTMLElement;\n\n  attach() {\n    super.attach();\n    this.attributes = new AttributorStore(this.domNode);\n  }\n\n  delta() {\n    return new Delta().insert(this.value(), {\n      ...this.formats(),\n      ...this.attributes.values(),\n    });\n  }\n\n  format(name: string, value: unknown) {\n    const attribute = this.scroll.query(name, Scope.BLOCK_ATTRIBUTE);\n    if (attribute != null) {\n      // @ts-expect-error TODO: Scroll#query() should return Attributor when scope is attribute\n      this.attributes.attribute(attribute, value);\n    }\n  }\n\n  formatAt(index: number, length: number, name: string, value: unknown) {\n    this.format(name, value);\n  }\n\n  insertAt(index: number, value: string, def?: unknown) {\n    if (def != null) {\n      super.insertAt(index, value, def);\n      return;\n    }\n    const lines = value.split('\\n');\n    const text = lines.pop();\n    const blocks = lines.map((line) => {\n      const block = this.scroll.create(Block.blotName);\n      block.insertAt(0, line);\n      return block;\n    });\n    const ref = this.split(index);\n    blocks.forEach((block) => {\n      this.parent.insertBefore(block, ref);\n    });\n    if (text) {\n      this.parent.insertBefore(this.scroll.create('text', text), ref);\n    }\n  }\n}\nBlockEmbed.scope = Scope.BLOCK_BLOT;\n// It is important for cursor behavior BlockEmbeds use tags that are block level elements\n\nfunction blockDelta(blot: BlockBlot, filter = true) {\n  return blot\n    .descendants(LeafBlot)\n    .reduce((delta, leaf) => {\n      if (leaf.length() === 0) {\n        return delta;\n      }\n      return delta.insert(leaf.value(), bubbleFormats(leaf, {}, filter));\n    }, new Delta())\n    .insert('\\n', bubbleFormats(blot));\n}\n\nfunction bubbleFormats(\n  blot: Blot | null,\n  formats: Record<string, unknown> = {},\n  filter = true,\n): Record<string, unknown> {\n  if (blot == null) return formats;\n  if ('formats' in blot && typeof blot.formats === 'function') {\n    formats = {\n      ...formats,\n      ...blot.formats(),\n    };\n    if (filter) {\n      // exclude syntax highlighting from deltas and getFormat()\n      delete formats['code-token'];\n    }\n  }\n  if (\n    blot.parent == null ||\n    blot.parent.statics.blotName === 'scroll' ||\n    blot.parent.statics.scope !== blot.statics.scope\n  ) {\n    return formats;\n  }\n  return bubbleFormats(blot.parent, formats, filter);\n}\n\nexport { blockDelta, bubbleFormats, BlockEmbed, Block as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
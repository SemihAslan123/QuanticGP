{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { Registry } from 'parchment';\nvar MAX_REGISTER_ITERATIONS = 100;\nvar CORE_FORMATS = ['block', 'break', 'cursor', 'inline', 'scroll', 'text'];\nvar createRegistryWithFormats = function createRegistryWithFormats(formats, sourceRegistry, debug) {\n  var registry = new Registry();\n  CORE_FORMATS.forEach(function (name) {\n    var coreBlot = sourceRegistry.query(name);\n    if (coreBlot) registry.register(coreBlot);\n  });\n  formats.forEach(function (name) {\n    var format = sourceRegistry.query(name);\n    if (!format) {\n      debug.error(\"Cannot register \\\"\".concat(name, \"\\\" specified in \\\"formats\\\" config. Are you sure it was registered?\"));\n    }\n    var iterations = 0;\n    while (format) {\n      var _format$requiredConta;\n      registry.register(format);\n      format = 'blotName' in format ? (_format$requiredConta = format.requiredContainer) !== null && _format$requiredConta !== void 0 ? _format$requiredConta : null : null;\n      iterations += 1;\n      if (iterations > MAX_REGISTER_ITERATIONS) {\n        debug.error(\"Cycle detected in registering blot requiredContainer: \\\"\".concat(name, \"\\\"\"));\n        break;\n      }\n    }\n  });\n  return registry;\n};\nexport default createRegistryWithFormats;","map":{"version":3,"names":["Registry","MAX_REGISTER_ITERATIONS","CORE_FORMATS","createRegistryWithFormats","formats","sourceRegistry","debug","registry","forEach","name","coreBlot","query","register","format","error","concat","iterations","_format$requiredConta","requiredContainer"],"sources":["../../../src/core/utils/createRegistryWithFormats.ts"],"sourcesContent":["import { Registry } from 'parchment';\n\nconst MAX_REGISTER_ITERATIONS = 100;\nconst CORE_FORMATS = ['block', 'break', 'cursor', 'inline', 'scroll', 'text'];\n\nconst createRegistryWithFormats = (\n  formats: string[],\n  sourceRegistry: Registry,\n  debug: { error: (errorMessage: string) => void },\n) => {\n  const registry = new Registry();\n  CORE_FORMATS.forEach((name) => {\n    const coreBlot = sourceRegistry.query(name);\n    if (coreBlot) registry.register(coreBlot);\n  });\n\n  formats.forEach((name) => {\n    let format = sourceRegistry.query(name);\n    if (!format) {\n      debug.error(\n        `Cannot register \"${name}\" specified in \"formats\" config. Are you sure it was registered?`,\n      );\n    }\n    let iterations = 0;\n    while (format) {\n      registry.register(format);\n      format = 'blotName' in format ? format.requiredContainer ?? null : null;\n\n      iterations += 1;\n      if (iterations > MAX_REGISTER_ITERATIONS) {\n        debug.error(\n          `Cycle detected in registering blot requiredContainer: \"${name}\"`,\n        );\n        break;\n      }\n    }\n  });\n\n  return registry;\n};\n\nexport default createRegistryWithFormats;\n"],"mappings":";;;;;AAAA,SAASA,QAAQ,QAAQ,WAAW;AAEpC,IAAMC,uBAAuB,GAAG,GAAG;AACnC,IAAMC,YAAY,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,CAAC;AAE7E,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAC7BC,OAAiB,EACjBC,cAAwB,EACxBC,KAAgD,EAC7C;EACH,IAAMC,QAAQ,GAAG,IAAIP,QAAQ,CAAC,CAAC;EAC/BE,YAAY,CAACM,OAAO,CAAE,UAAAC,IAAI,EAAK;IAC7B,IAAMC,QAAQ,GAAGL,cAAc,CAACM,KAAK,CAACF,IAAI,CAAC;IAC3C,IAAIC,QAAQ,EAAEH,QAAQ,CAACK,QAAQ,CAACF,QAAQ,CAAC;EAC3C,CAAC,CAAC;EAEFN,OAAO,CAACI,OAAO,CAAE,UAAAC,IAAI,EAAK;IACxB,IAAII,MAAM,GAAGR,cAAc,CAACM,KAAK,CAACF,IAAI,CAAC;IACvC,IAAI,CAACI,MAAM,EAAE;MACXP,KAAK,CAACQ,KAAK,sBAAAC,MAAA,CACWN,IAAK,wEAC3B,CAAC;IACH;IACA,IAAIO,UAAU,GAAG,CAAC;IAClB,OAAOH,MAAM,EAAE;MAAA,IAAAI,qBAAA;MACbV,QAAQ,CAACK,QAAQ,CAACC,MAAM,CAAC;MACzBA,MAAM,GAAG,UAAU,IAAIA,MAAM,IAAAI,qBAAA,GAAGJ,MAAM,CAACK,iBAAiB,cAAAD,qBAAA,cAAAA,qBAAA,GAAI,IAAI,GAAG,IAAI;MAEvED,UAAU,IAAI,CAAC;MACf,IAAIA,UAAU,GAAGf,uBAAuB,EAAE;QACxCK,KAAK,CAACQ,KAAK,4DAAAC,MAAA,CACiDN,IAAK,OACjE,CAAC;QACD;MACF;IACF;EACF,CAAC,CAAC;EAEF,OAAOF,QAAQ;AACjB,CAAC;AAED,eAAeJ,yBAAyB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _defineProperty from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport Block from '../blots/block.js';\nimport Break from '../blots/break.js';\nimport Cursor from '../blots/cursor.js';\nimport Inline from '../blots/inline.js';\nimport TextBlot, { escapeText } from '../blots/text.js';\nimport Container from '../blots/container.js';\nimport Quill from '../core/quill.js';\nvar CodeBlockContainer = /*#__PURE__*/function (_Container) {\n  function CodeBlockContainer() {\n    _classCallCheck(this, CodeBlockContainer);\n    return _callSuper(this, CodeBlockContainer, arguments);\n  }\n  _inherits(CodeBlockContainer, _Container);\n  return _createClass(CodeBlockContainer, [{\n    key: \"code\",\n    value: function code(index, length) {\n      return this.children\n      // @ts-expect-error\n      .map(function (child) {\n        return child.length() <= 1 ? '' : child.domNode.innerText;\n      }).join('\\n').slice(index, index + length);\n    }\n  }, {\n    key: \"html\",\n    value: function html(index, length) {\n      // `\\n`s are needed in order to support empty lines at the beginning and the end.\n      // https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\n      return \"<pre>\\n\".concat(escapeText(this.code(index, length)), \"\\n</pre>\");\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var domNode = _superPropGet(CodeBlockContainer, \"create\", this, 2)([value]);\n      domNode.setAttribute('spellcheck', 'false');\n      return domNode;\n    }\n  }]);\n}(Container);\nvar CodeBlock = /*#__PURE__*/function (_Block) {\n  function CodeBlock() {\n    _classCallCheck(this, CodeBlock);\n    return _callSuper(this, CodeBlock, arguments);\n  }\n  _inherits(CodeBlock, _Block);\n  return _createClass(CodeBlock, null, [{\n    key: \"register\",\n    value: function register() {\n      Quill.register(CodeBlockContainer);\n    }\n  }]);\n}(Block);\n_defineProperty(CodeBlock, \"TAB\", '  ');\nvar Code = /*#__PURE__*/function (_Inline) {\n  function Code() {\n    _classCallCheck(this, Code);\n    return _callSuper(this, Code, arguments);\n  }\n  _inherits(Code, _Inline);\n  return _createClass(Code);\n}(Inline);\nCode.blotName = 'code';\nCode.tagName = 'CODE';\nCodeBlock.blotName = 'code-block';\nCodeBlock.className = 'ql-code-block';\nCodeBlock.tagName = 'DIV';\nCodeBlockContainer.blotName = 'code-block-container';\nCodeBlockContainer.className = 'ql-code-block-container';\nCodeBlockContainer.tagName = 'DIV';\nCodeBlockContainer.allowedChildren = [CodeBlock];\nCodeBlock.allowedChildren = [TextBlot, Break, Cursor];\nCodeBlock.requiredContainer = CodeBlockContainer;\nexport { Code, CodeBlockContainer, CodeBlock as default };","map":{"version":3,"names":["Block","Break","Cursor","Inline","TextBlot","escapeText","Container","Quill","CodeBlockContainer","_Container","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","code","index","length","children","map","child","domNode","innerText","join","slice","html","concat","create","_superPropGet","setAttribute","CodeBlock","_Block","register","_defineProperty","Code","_Inline","blotName","tagName","className","allowedChildren","requiredContainer","default"],"sources":["../../src/formats/code.ts"],"sourcesContent":["import Block from '../blots/block.js';\nimport Break from '../blots/break.js';\nimport Cursor from '../blots/cursor.js';\nimport Inline from '../blots/inline.js';\nimport TextBlot, { escapeText } from '../blots/text.js';\nimport Container from '../blots/container.js';\nimport Quill from '../core/quill.js';\n\nclass CodeBlockContainer extends Container {\n  static create(value: string) {\n    const domNode = super.create(value) as Element;\n    domNode.setAttribute('spellcheck', 'false');\n    return domNode;\n  }\n\n  code(index: number, length: number) {\n    return (\n      this.children\n        // @ts-expect-error\n        .map((child) => (child.length() <= 1 ? '' : child.domNode.innerText))\n        .join('\\n')\n        .slice(index, index + length)\n    );\n  }\n\n  html(index: number, length: number) {\n    // `\\n`s are needed in order to support empty lines at the beginning and the end.\n    // https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\n    return `<pre>\\n${escapeText(this.code(index, length))}\\n</pre>`;\n  }\n}\n\nclass CodeBlock extends Block {\n  static TAB = '  ';\n\n  static register() {\n    Quill.register(CodeBlockContainer);\n  }\n}\n\nclass Code extends Inline {}\nCode.blotName = 'code';\nCode.tagName = 'CODE';\n\nCodeBlock.blotName = 'code-block';\nCodeBlock.className = 'ql-code-block';\nCodeBlock.tagName = 'DIV';\nCodeBlockContainer.blotName = 'code-block-container';\nCodeBlockContainer.className = 'ql-code-block-container';\nCodeBlockContainer.tagName = 'DIV';\n\nCodeBlockContainer.allowedChildren = [CodeBlock];\n\nCodeBlock.allowedChildren = [TextBlot, Break, Cursor];\nCodeBlock.requiredContainer = CodeBlockContainer;\n\nexport { Code, CodeBlockContainer, CodeBlock as default };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
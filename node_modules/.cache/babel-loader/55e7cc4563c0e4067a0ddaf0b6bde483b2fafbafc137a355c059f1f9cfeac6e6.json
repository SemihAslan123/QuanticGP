{"ast":null,"code":"import _classCallCheck from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _defineProperty from \"/home/esteban/2emeAnnee/S3/devWeb/QuanticGP10/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport Inline from '../blots/inline.js';\nvar Link = /*#__PURE__*/function (_Inline) {\n  function Link() {\n    _classCallCheck(this, Link);\n    return _callSuper(this, Link, arguments);\n  }\n  _inherits(Link, _Inline);\n  return _createClass(Link, [{\n    key: \"format\",\n    value: function format(name, value) {\n      if (name !== this.statics.blotName || !value) {\n        _superPropGet(Link, \"format\", this, 3)([name, value]);\n      } else {\n        // @ts-expect-error\n        this.domNode.setAttribute('href', this.constructor.sanitize(value));\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(value) {\n      var node = _superPropGet(Link, \"create\", this, 2)([value]);\n      node.setAttribute('href', this.sanitize(value));\n      node.setAttribute('rel', 'noopener noreferrer');\n      node.setAttribute('target', '_blank');\n      return node;\n    }\n  }, {\n    key: \"formats\",\n    value: function formats(domNode) {\n      return domNode.getAttribute('href');\n    }\n  }, {\n    key: \"sanitize\",\n    value: function sanitize(url) {\n      return _sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n    }\n  }]);\n}(Inline);\n_defineProperty(Link, \"blotName\", 'link');\n_defineProperty(Link, \"tagName\", 'A');\n_defineProperty(Link, \"SANITIZED_URL\", 'about:blank');\n_defineProperty(Link, \"PROTOCOL_WHITELIST\", ['http', 'https', 'mailto', 'tel', 'sms']);\nfunction _sanitize(url, protocols) {\n  var anchor = document.createElement('a');\n  anchor.href = url;\n  var protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n  return protocols.indexOf(protocol) > -1;\n}\nexport { Link as default, _sanitize as sanitize };","map":{"version":3,"names":["Inline","Link","_Inline","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","format","name","statics","blotName","_superPropGet","domNode","setAttribute","constructor","sanitize","create","node","formats","getAttribute","url","PROTOCOL_WHITELIST","SANITIZED_URL","_defineProperty","protocols","anchor","document","createElement","href","protocol","slice","indexOf","default"],"sources":["../../src/formats/link.ts"],"sourcesContent":["import Inline from '../blots/inline.js';\n\nclass Link extends Inline {\n  static blotName = 'link';\n  static tagName = 'A';\n  static SANITIZED_URL = 'about:blank';\n  static PROTOCOL_WHITELIST = ['http', 'https', 'mailto', 'tel', 'sms'];\n\n  static create(value: string) {\n    const node = super.create(value) as HTMLElement;\n    node.setAttribute('href', this.sanitize(value));\n    node.setAttribute('rel', 'noopener noreferrer');\n    node.setAttribute('target', '_blank');\n    return node;\n  }\n\n  static formats(domNode: HTMLElement) {\n    return domNode.getAttribute('href');\n  }\n\n  static sanitize(url: string) {\n    return sanitize(url, this.PROTOCOL_WHITELIST) ? url : this.SANITIZED_URL;\n  }\n\n  format(name: string, value: unknown) {\n    if (name !== this.statics.blotName || !value) {\n      super.format(name, value);\n    } else {\n      // @ts-expect-error\n      this.domNode.setAttribute('href', this.constructor.sanitize(value));\n    }\n  }\n}\n\nfunction sanitize(url: string, protocols: string[]) {\n  const anchor = document.createElement('a');\n  anchor.href = url;\n  const protocol = anchor.href.slice(0, anchor.href.indexOf(':'));\n  return protocols.indexOf(protocol) > -1;\n}\n\nexport { Link as default, sanitize };\n"],"mappings":";;;;;;;;AAAA,OAAOA,MAAM,MAAM,oBAAoB;AAAA,IAEjCC,IAAI,0BAAAC,OAAA;EAAA,SAAAD,KAAA;IAAAE,eAAA,OAAAF,IAAA;IAAA,OAAAG,UAAA,OAAAH,IAAA,EAAAI,SAAA;EAAA;EAAAC,SAAA,CAAAL,IAAA,EAAAC,OAAA;EAAA,OAAAK,YAAA,CAAAN,IAAA;IAAAO,GAAA;IAAAC,KAAA,EAsBR,SAAAC,MAAMA,CAACC,IAAY,EAAEF,KAAc,EAAE;MACnC,IAAIE,IAAI,KAAK,IAAI,CAACC,OAAO,CAACC,QAAQ,IAAI,CAACJ,KAAK,EAAE;QAC5CK,aAAA,CAAAb,IAAA,sBAAaU,IAAI,EAAEF,KAAK;MAC1B,CAAC,MAAM;QACL;QACA,IAAI,CAACM,OAAO,CAACC,YAAY,CAAC,MAAM,EAAE,IAAI,CAACC,WAAW,CAACC,QAAQ,CAACT,KAAK,CAAC,CAAC;MACrE;IACF;EAAA;IAAAD,GAAA;IAAAC,KAAA,EAvBA,SAAOU,MAAMA,CAACV,KAAa,EAAE;MAC3B,IAAMW,IAAI,GAAAN,aAAA,CAAAb,IAAA,sBAAgBQ,KAAK,EAAgB;MAC/CW,IAAI,CAACJ,YAAY,CAAC,MAAM,EAAE,IAAI,CAACE,QAAQ,CAACT,KAAK,CAAC,CAAC;MAC/CW,IAAI,CAACJ,YAAY,CAAC,KAAK,EAAE,qBAAqB,CAAC;MAC/CI,IAAI,CAACJ,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC;MACrC,OAAOI,IAAI;IACb;EAAA;IAAAZ,GAAA;IAAAC,KAAA,EAEA,SAAOY,OAAOA,CAACN,OAAoB,EAAE;MACnC,OAAOA,OAAO,CAACO,YAAY,CAAC,MAAM,CAAC;IACrC;EAAA;IAAAd,GAAA;IAAAC,KAAA,EAEA,SAAOS,QAAQA,CAACK,GAAW,EAAE;MAC3B,OAAOL,SAAQ,CAACK,GAAG,EAAE,IAAI,CAACC,kBAAkB,CAAC,GAAGD,GAAG,GAAG,IAAI,CAACE,aAAa;IAC1E;EAAA;AAAA,EApBiBzB,MAAM;AAAA0B,eAAA,CAAnBzB,IAAI,cACU,MAAM;AAAAyB,eAAA,CADpBzB,IAAI,aAES,GAAG;AAAAyB,eAAA,CAFhBzB,IAAI,mBAGe,aAAa;AAAAyB,eAAA,CAHhCzB,IAAI,wBAIoB,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC;AA4BvE,SAASiB,SAAQA,CAACK,GAAW,EAAEI,SAAmB,EAAE;EAClD,IAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EAC1CF,MAAM,CAACG,IAAI,GAAGR,GAAG;EACjB,IAAMS,QAAQ,GAAGJ,MAAM,CAACG,IAAI,CAACE,KAAK,CAAC,CAAC,EAAEL,MAAM,CAACG,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC,CAAC;EAC/D,OAAOP,SAAS,CAACO,OAAO,CAACF,QAAQ,CAAC,GAAG,CAAC,CAAC;AACzC;AAEA,SAAS/B,IAAI,IAAIkC,OAAO,EAAEjB,SAAQ,IAARA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}